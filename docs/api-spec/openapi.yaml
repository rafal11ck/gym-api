openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost
  description: Generated server url
security:
- OAuth2: []
paths:
  /workout-sessions:
    get:
      tags:
      - workout-session-controller
      operationId: listWorkoutSessions
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkoutSessionDto"
    post:
      tags:
      - workout-session-controller
      operationId: createWorkoutSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkoutSessionRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WorkoutSessionDto"
  /workout-sessions/{id}/exercises:
    post:
      tags:
      - workout-session-controller
      operationId: addWorkoutSessionExercise
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkoutSessionExerciseRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WorkoutSessionDto"
  /workout-sessions/{id}/attendants:
    post:
      tags:
      - workout-session-controller
      operationId: addWorkoutSessionAttendant
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkoutSessionAttendantRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WorkoutSessionDto"
  /target-muscles:
    get:
      tags:
      - target-muscle-controller
      operationId: listTargetMuscles
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TargetMuscleDto"
    post:
      tags:
      - target-muscle-controller
      operationId: createTargetMuscle
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTargetMuscleRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TargetMuscleDto"
  /payments:
    get:
      tags:
      - payment-controller
      operationId: listPayments
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentDto"
    post:
      tags:
      - payment-controller
      operationId: createPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PaymentDto"
  /memberships:
    get:
      tags:
      - membership-controller
      operationId: listMemberships
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MembershipDto"
    post:
      tags:
      - membership-controller
      operationId: createMembership
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MembershipRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MembershipDto"
  /membership-types:
    get:
      tags:
      - membership-type-controller
      operationId: listMembershipTypes
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MembershipTypeDto"
    post:
      tags:
      - membership-type-controller
      operationId: createMembershipType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MembershipTypeRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MembershipTypeDto"
  /maintenance-tasks:
    get:
      tags:
      - maintenance-task-controller
      operationId: listMaintenanceTasks
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaintenanceTaskDto"
    post:
      tags:
      - maintenance-task-controller
      operationId: createMaintenanceTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceTaskRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MaintenanceTaskDto"
  /halls:
    get:
      tags:
      - hall-controller
      operationId: listHalls
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HallDto"
    post:
      tags:
      - hall-controller
      operationId: createHall
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HallRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HallDto"
  /exercises:
    get:
      tags:
      - exercise-controller
      operationId: listExercises
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExerciseDto"
    post:
      tags:
      - exercise-controller
      operationId: createExercise
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateExerciseRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ExerciseDto"
  /chats:
    post:
      tags:
      - chat-controller
      operationId: createChat
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChatDto"
  /chats/{id}/participants:
    post:
      tags:
      - chat-controller
      operationId: addChatParticipant
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatParticipantCreateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChatParticipantDto"
  /cards:
    get:
      tags:
      - card-controller
      operationId: listCards
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardDto"
    post:
      tags:
      - card-controller
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
  /workout-sessions/{id}:
    get:
      tags:
      - workout-session-controller
      operationId: getWorkoutSession
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WorkoutSessionDto"
    patch:
      tags:
      - workout-session-controller
      operationId: updateCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkoutSessionRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WorkoutSessionDto"
  /payments/{id}:
    get:
      tags:
      - payment-controller
      operationId: getPayment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PaymentDto"
    patch:
      tags:
      - payment-controller
      operationId: updatePayment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PaymentDto"
  /memberships/{id}:
    get:
      tags:
      - membership-controller
      operationId: getMembership
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MembershipDto"
    patch:
      tags:
      - membership-controller
      operationId: patchMembership
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MembershipRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MembershipDto"
  /membership-types/{id}:
    get:
      tags:
      - membership-type-controller
      operationId: getMembershipType
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MembershipTypeDto"
    patch:
      tags:
      - membership-type-controller
      operationId: updateCard_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MembershipTypeRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MembershipTypeDto"
  /maintenance-tasks/{id}:
    get:
      tags:
      - maintenance-task-controller
      operationId: getMaintenanceTask
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MaintenanceTaskDto"
    delete:
      tags:
      - maintenance-task-controller
      operationId: deleteMaintenanceTask
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
    patch:
      tags:
      - maintenance-task-controller
      operationId: updateMaintenanceTask
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceTaskRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MaintenanceTaskDto"
  /halls/{id}:
    get:
      tags:
      - hall-controller
      operationId: getHall
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HallDto"
    patch:
      tags:
      - hall-controller
      operationId: updateHall
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HallRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HallDto"
  /chats/{id}/participants/{userId}:
    patch:
      tags:
      - chat-controller
      operationId: updateChatParticipant
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatParticipantPatchRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChatParticipantDto"
  /cards/{id}:
    get:
      tags:
      - card-controller
      operationId: getCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
    patch:
      tags:
      - card-controller
      operationId: updateCard_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
  /users:
    get:
      tags:
      - user-controller
      operationId: listUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
  /users/{id}:
    get:
      tags:
      - user-controller
      operationId: getUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
  /users/{id}/workout-sessions:
    get:
      tags:
      - user-controller
      operationId: listExercises_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkoutSessionDto"
  /users/{id}/progress/overview:
    get:
      tags:
      - user-controller
      operationId: getUserProgressOverview
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProgressOverviewDto"
  /users/{id}/progress/charts/total-effort:
    get:
      tags:
      - user-controller
      operationId: getUserTotalChartData
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: numberOfWeeks
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 12
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChartDto"
  /users/{id}/progress/charts/exercise-heaviest-weight:
    get:
      tags:
      - user-controller
      operationId: getUserExerciseChartData
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: numberOfWeeks
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 12
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChartDto"
  /users/{id}/chats:
    get:
      tags:
      - user-controller
      operationId: listChats
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatDto"
  /user-roles:
    get:
      tags:
      - user-role-controller
      operationId: listUserRoles
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRoleDto"
  /payment-statuses:
    get:
      tags:
      - payment-status-controller
      operationId: listPaymentStatuses
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentStatusDto"
  /hall-types:
    get:
      tags:
      - hall-type-controller
      operationId: listHallTypes
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HallTypeDto"
  /countries:
    get:
      tags:
      - country-controller
      operationId: getCountry
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CountryDto"
  /chats/{id}:
    get:
      tags:
      - chat-controller
      operationId: getChat
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChatDto"
  /workout-sessions/{id}/exercises/{exerciseId}:
    delete:
      tags:
      - workout-session-controller
      operationId: deleteWorkoutSessionExercise
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: exerciseId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
  /workout-sessions/{id}/attendants/{userId}:
    delete:
      tags:
      - workout-session-controller
      operationId: deleteWorkoutSessionAttendant
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
  /target-muscles/{id}:
    delete:
      tags:
      - target-muscle-controller
      operationId: deleteTargetMuscle
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
  /exercises/{id}:
    delete:
      tags:
      - exercise-controller
      operationId: deleteExercise
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
components:
  schemas:
    WorkoutSessionRequest:
      type: object
      properties:
        coachUuid:
          type: string
          format: uuid
        hallUuid:
          type: string
          format: uuid
        date:
          type: string
          format: date
        title:
          type: string
        description:
          type: string
      required:
      - coachUuid
      - date
      - description
      - hallUuid
      - title
    Card:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        country:
          $ref: "#/components/schemas/Country"
        cardNumber:
          type: string
        cvv:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        nameOnCard:
          type: string
        postalCode:
          type: string
      required:
      - cardNumber
      - cvv
      - dateOfBirth
      - nameOnCard
      - postalCode
    Country:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        countryName:
          type: string
      required:
      - countryName
    Exercise:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        targetMuscles:
          type: array
          items:
            $ref: "#/components/schemas/TargetMuscle"
          uniqueItems: true
    Hall:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        hallType:
          $ref: "#/components/schemas/HallType"
        hallName:
          type: string
        hallDescription:
          type: string
    HallType:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
    Membership:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        purchaseDate:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        membershipType:
          $ref: "#/components/schemas/MembershipType"
    MembershipType:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        type:
          type: string
        price:
          type: number
          format: float
    TargetMuscle:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        roles:
          type: array
          items:
            $ref: "#/components/schemas/UserRole"
          uniqueItems: true
        card:
          $ref: "#/components/schemas/Card"
        membership:
          $ref: "#/components/schemas/Membership"
        firstName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        username:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        imageUrl:
          type: string
      required:
      - firstName
      - lastName
    UserRole:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        roleName:
          type: string
    WorkoutSessionDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        coach:
          $ref: "#/components/schemas/User"
        hall:
          $ref: "#/components/schemas/Hall"
        date:
          type: string
          format: date
        title:
          type: string
        description:
          type: string
        attendants:
          type: array
          items:
            $ref: "#/components/schemas/User"
          uniqueItems: true
        exercises:
          type: array
          items:
            $ref: "#/components/schemas/WorkoutSessionExerciseDto"
    WorkoutSessionExerciseDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        exercise:
          $ref: "#/components/schemas/Exercise"
        reps:
          type: integer
          format: int32
        weight:
          type: number
          format: float
        exerciseOrder:
          type: integer
          format: int32
    WorkoutSessionExerciseRequest:
      type: object
      properties:
        exerciseUuid:
          type: string
          format: uuid
        reps:
          type: integer
          format: int32
        weight:
          type: number
          format: float
        exerciseOrder:
          type: integer
          format: int32
      required:
      - exerciseOrder
      - exerciseUuid
      - reps
      - weight
    WorkoutSessionAttendantRequest:
      type: object
      properties:
        userUuid:
          type: string
          format: uuid
      required:
      - userUuid
    CreateTargetMuscleRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
    TargetMuscleDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
    PaymentRequest:
      type: object
      properties:
        cardUuid:
          type: string
          format: uuid
        statusUuid:
          type: string
          format: uuid
        membershipUuid:
          type: string
          format: uuid
      required:
      - cardUuid
      - membershipUuid
      - statusUuid
    PaymentDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        card:
          $ref: "#/components/schemas/Card"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        membership:
          $ref: "#/components/schemas/Membership"
    PaymentStatus:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        status:
          type: string
    MembershipRequest:
      type: object
      properties:
        purchaseDate:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        membershipTypeUuid:
          type: string
          format: uuid
      required:
      - membershipTypeUuid
      - purchaseDate
      - validUntil
    MembershipDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        purchaseDate:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        membershipType:
          $ref: "#/components/schemas/MembershipType"
    MembershipTypeRequest:
      type: object
      properties:
        type:
          type: string
        price:
          type: number
          format: float
      required:
      - price
      - type
    MembershipTypeDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        type:
          type: string
        price:
          type: number
          format: float
    MaintenanceTaskRequest:
      type: object
      properties:
        maintainerUuid:
          type: string
          format: uuid
        hallUuid:
          type: string
          format: uuid
        plannedStartDate:
          type: string
          format: date-time
        plannedEndDate:
          type: string
          format: date-time
        description:
          type: string
      required:
      - description
      - hallUuid
      - maintainerUuid
      - plannedEndDate
      - plannedStartDate
    MaintenanceTaskDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        maintainer:
          $ref: "#/components/schemas/User"
        maintenanceHall:
          $ref: "#/components/schemas/Hall"
        plannedStartDate:
          type: string
          format: date-time
        plannedEndDate:
          type: string
          format: date-time
        description:
          type: string
    HallRequest:
      type: object
      properties:
        hallTypeUuid:
          type: string
          format: uuid
        hallName:
          type: string
        hallDescription:
          type: string
      required:
      - hallDescription
      - hallName
      - hallTypeUuid
    HallDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        hallType:
          $ref: "#/components/schemas/HallType"
        hallName:
          type: string
        hallDescription:
          type: string
    CreateExerciseRequest:
      type: object
      properties:
        name:
          type: string
        targetMuscles:
          type: array
          items:
            type: string
            format: uuid
          uniqueItems: true
    ExerciseDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        targetMuscles:
          type: array
          items:
            $ref: "#/components/schemas/TargetMuscleDto"
          uniqueItems: true
    ChatDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        participants:
          type: array
          items:
            $ref: "#/components/schemas/ChatParticipantDto"
          uniqueItems: true
    ChatParticipantDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        user:
          $ref: "#/components/schemas/User"
        lastReadDateTime:
          type: string
          format: date-time
    ChatParticipantCreateRequest:
      type: object
      properties:
        userUuid:
          type: string
          format: uuid
        lastReadDateTime:
          type: string
          format: date-time
      required:
      - userUuid
    CardRequest:
      type: object
      properties:
        countryUuid:
          type: string
          format: uuid
        cardNumber:
          type: string
        cvv:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        nameOnCard:
          type: string
        postalCode:
          type: string
      required:
      - cardNumber
      - countryUuid
      - cvv
      - dateOfBirth
      - nameOnCard
      - postalCode
    CardDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        country:
          $ref: "#/components/schemas/Country"
        cardNumber:
          type: string
        cvv:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        nameOnCard:
          type: string
        postalCode:
          type: string
    ChatParticipantPatchRequest:
      type: object
      properties:
        lastReadDateTime:
          type: string
          format: date-time
      required:
      - lastReadDateTime
    UserDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        roles:
          type: array
          items:
            type: string
        card:
          $ref: "#/components/schemas/Card"
        membership:
          $ref: "#/components/schemas/Membership"
        firstName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        email:
          type: string
        username:
          type: string
        phoneNumber:
          type: string
        imageUrl:
          type: string
    ProgressOverviewDto:
      type: object
      properties:
        weeklyTotalSets:
          $ref: "#/components/schemas/ProgressOverviewStatisticDto"
        weeklySessionVolume:
          $ref: "#/components/schemas/ProgressOverviewStatisticDto"
    ProgressOverviewStatisticDto:
      type: object
      properties:
        value:
          type: integer
          format: int32
        trend:
          type: integer
          format: int32
    ChartDataDto:
      type: object
      properties:
        title:
          type: string
        timeSeries:
          $ref: "#/components/schemas/TimeSeriesDto"
    ChartDto:
      type: object
      properties:
        description:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/ChartDataDto"
    TimeSeriesDto:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
        values:
          type: array
          items:
            type: number
            format: float
    UserRoleDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        role:
          type: string
    PaymentStatusDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        status:
          type: string
    HallTypeDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
    CountryDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        countryName:
          type: string
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:8081/realms/gym/protocol/openid-connect/auth
          tokenUrl: http://localhost:8081/realms/gym/protocol/openid-connect/token
          refreshUrl: http://localhost:8081/realms/gym/protocol/openid-connect/token
          scopes: {}
