openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost
  description: Generated server url
security:
- OAuth2: []
paths:
  /workout-sessions:
    get:
      tags:
      - workout-session-controller
      operationId: listWorkoutSessions
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkoutSessionDto"
    post:
      tags:
      - workout-session-controller
      operationId: createWorkoutSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkoutSessionRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WorkoutSessionDto"
  /workout-sessions/{id}/exercises:
    post:
      tags:
      - workout-session-controller
      operationId: addWorkoutSessionExercise
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkoutSessionExerciseRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WorkoutSessionDto"
  /workout-sessions/{id}/attendants:
    post:
      tags:
      - workout-session-controller
      operationId: addWorkoutSessionAttendant
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkoutSessionAttendantRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WorkoutSessionDto"
  /target-muscles:
    get:
      tags:
      - target-muscle-controller
      operationId: listTargetMuscles
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TargetMuscleDto"
    post:
      tags:
      - target-muscle-controller
      operationId: createTargetMuscle
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTargetMuscleRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TargetMuscleDto"
  /stripe/webhook:
    post:
      tags:
      - stripe-controller
      operationId: handleStripeWebhook
      parameters:
      - name: Stripe-Signature
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
  /memberships:
    get:
      tags:
      - membership-controller
      operationId: listMemberships
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MembershipDto"
    post:
      tags:
      - membership-controller
      operationId: createMembership
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MembershipRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MembershipDto"
  /memberships/{id}/payments:
    get:
      tags:
      - membership-controller
      operationId: getMembershipPayments
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentDto"
    post:
      tags:
      - membership-controller
      operationId: getPaymentURI
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: uri
  /membership-types:
    get:
      tags:
      - membership-type-controller
      operationId: listMembershipTypes
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MembershipTypeDto"
    post:
      tags:
      - membership-type-controller
      operationId: createMembershipType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MembershipTypeRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MembershipTypeDto"
  /maintenance-tasks:
    get:
      tags:
      - maintenance-task-controller
      operationId: listMaintenanceTasks
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaintenanceTaskDto"
    post:
      tags:
      - maintenance-task-controller
      operationId: createMaintenanceTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceTaskRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MaintenanceTaskDto"
  /halls:
    get:
      tags:
      - hall-controller
      operationId: listHalls
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          type: integer
          default: 0
          minimum: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          type: integer
          default: 20
          minimum: 1
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageHallDto"
    post:
      tags:
      - hall-controller
      operationId: createHall
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HallRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HallDto"
  /exercises:
    get:
      tags:
      - exercise-controller
      operationId: listExercises
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExerciseDto"
    post:
      tags:
      - exercise-controller
      operationId: createExercise
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateExerciseRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ExerciseDto"
  /workout-sessions/{id}:
    get:
      tags:
      - workout-session-controller
      operationId: getWorkoutSession
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WorkoutSessionDto"
    patch:
      tags:
      - workout-session-controller
      operationId: updateCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkoutSessionRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WorkoutSessionDto"
  /memberships/{id}:
    get:
      tags:
      - membership-controller
      operationId: getMembership
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MembershipDto"
    patch:
      tags:
      - membership-controller
      operationId: patchMembership
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MembershipRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MembershipDto"
  /membership-types/{id}:
    get:
      tags:
      - membership-type-controller
      operationId: getMembershipType
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MembershipTypeDto"
    patch:
      tags:
      - membership-type-controller
      operationId: updateCard_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MembershipTypeRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MembershipTypeDto"
  /maintenance-tasks/{id}:
    get:
      tags:
      - maintenance-task-controller
      operationId: getMaintenanceTask
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MaintenanceTaskDto"
    delete:
      tags:
      - maintenance-task-controller
      operationId: deleteMaintenanceTask
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
    patch:
      tags:
      - maintenance-task-controller
      operationId: updateMaintenanceTask
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceTaskRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MaintenanceTaskDto"
  /halls/{id}:
    get:
      tags:
      - hall-controller
      operationId: getHall
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HallDto"
    patch:
      tags:
      - hall-controller
      operationId: updateHall
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HallRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HallDto"
  /whoami:
    get:
      tags:
      - who-am-i-controller
      operationId: whoAmI
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
  /users:
    get:
      tags:
      - user-controller
      operationId: listUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
  /users/{id}:
    get:
      tags:
      - user-controller
      operationId: getUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
  /users/{id}/workout-sessions:
    get:
      tags:
      - user-controller
      operationId: listUserWorkoutSessions
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkoutSessionDto"
  /users/{id}/progress/overview:
    get:
      tags:
      - user-controller
      operationId: getUserProgressOverview
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProgressOverviewDto"
  /users/{id}/progress/charts/total-effort:
    get:
      tags:
      - user-controller
      operationId: getUserTotalChartData
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: numberOfWeeks
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 12
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChartDto"
  /users/{id}/progress/charts/exercise-heaviest-weight:
    get:
      tags:
      - user-controller
      operationId: getUserExerciseChartData
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: numberOfWeeks
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 12
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChartDto"
  /users/{id}/last-workout-session:
    get:
      tags:
      - user-controller
      operationId: getUserLastWorkoutSession
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WorkoutSessionDto"
  /user-roles:
    get:
      tags:
      - user-role-controller
      operationId: listUserRoles
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRoleDto"
  /hall-types:
    get:
      tags:
      - hall-type-controller
      operationId: listHallTypes
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HallTypeDto"
  /workout-sessions/{id}/exercises/{exerciseId}:
    delete:
      tags:
      - workout-session-controller
      operationId: deleteWorkoutSessionExercise
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: exerciseId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
  /workout-sessions/{id}/attendants/{userId}:
    delete:
      tags:
      - workout-session-controller
      operationId: deleteWorkoutSessionAttendant
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
  /target-muscles/{id}:
    delete:
      tags:
      - target-muscle-controller
      operationId: deleteTargetMuscle
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
  /exercises/{id}:
    delete:
      tags:
      - exercise-controller
      operationId: deleteExercise
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
components:
  schemas:
    WorkoutSessionRequest:
      type: object
      properties:
        coachUuid:
          type: string
          format: uuid
        hallUuid:
          type: string
          format: uuid
        date:
          type: string
          format: date
        title:
          type: string
        description:
          type: string
      required:
      - coachUuid
      - date
      - description
      - hallUuid
      - title
    Exercise:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        targetMuscles:
          type: array
          items:
            $ref: "#/components/schemas/TargetMuscle"
          uniqueItems: true
    Hall:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        hallType:
          $ref: "#/components/schemas/HallType"
        hallName:
          type: string
        hallDescription:
          type: string
    HallType:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
    Membership:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        membershipType:
          $ref: "#/components/schemas/MembershipType"
    MembershipType:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        type:
          type: string
        currency:
          type: object
          properties:
            currencyCode:
              type: string
            numericCode:
              type: integer
              format: int32
            numericCodeAsString:
              type: string
            displayName:
              type: string
            symbol:
              type: string
            defaultFractionDigits:
              type: integer
              format: int32
        price:
          type: number
    TargetMuscle:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        roles:
          type: array
          items:
            $ref: "#/components/schemas/UserRole"
          uniqueItems: true
        membership:
          $ref: "#/components/schemas/Membership"
        firstName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        username:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        imageUrl:
          type: string
      required:
      - firstName
      - lastName
    UserRole:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        roleName:
          type: string
    WorkoutSessionDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        coach:
          $ref: "#/components/schemas/User"
        hall:
          $ref: "#/components/schemas/Hall"
        date:
          type: string
          format: date
        title:
          type: string
        description:
          type: string
        attendants:
          type: array
          items:
            $ref: "#/components/schemas/User"
          uniqueItems: true
        exercises:
          type: array
          items:
            $ref: "#/components/schemas/WorkoutSessionExerciseDto"
    WorkoutSessionExerciseDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        exercise:
          $ref: "#/components/schemas/Exercise"
        reps:
          type: integer
          format: int32
        weight:
          type: number
          format: float
        exerciseOrder:
          type: integer
          format: int32
    WorkoutSessionExerciseRequest:
      type: object
      properties:
        exerciseUuid:
          type: string
          format: uuid
        reps:
          type: integer
          format: int32
        weight:
          type: number
          format: float
        exerciseOrder:
          type: integer
          format: int32
      required:
      - exerciseOrder
      - exerciseUuid
      - reps
      - weight
    WorkoutSessionAttendantRequest:
      type: object
      properties:
        userUuid:
          type: string
          format: uuid
      required:
      - userUuid
    CreateTargetMuscleRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
    TargetMuscleDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
    MembershipRequest:
      type: object
      properties:
        membershipTypeUuid:
          type: string
          format: uuid
      required:
      - membershipTypeUuid
    MembershipDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        purchaseDate:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        membershipType:
          $ref: "#/components/schemas/MembershipType"
    MembershipTypeRequest:
      type: object
      properties:
        type:
          type: string
        price:
          type: number
        currencyCode:
          type: string
      required:
      - currencyCode
      - price
      - type
    MembershipTypeDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        type:
          type: string
        price:
          type: number
        currency:
          type: string
    MaintenanceTaskRequest:
      type: object
      properties:
        maintainerUuid:
          type: string
          format: uuid
        hallUuid:
          type: string
          format: uuid
        plannedStartDate:
          type: string
          format: date-time
        plannedEndDate:
          type: string
          format: date-time
        description:
          type: string
      required:
      - description
      - hallUuid
      - maintainerUuid
      - plannedEndDate
      - plannedStartDate
    MaintenanceTaskDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        maintainer:
          $ref: "#/components/schemas/User"
        maintenanceHall:
          $ref: "#/components/schemas/Hall"
        plannedStartDate:
          type: string
          format: date-time
        plannedEndDate:
          type: string
          format: date-time
        description:
          type: string
    HallRequest:
      type: object
      properties:
        hallTypeUuid:
          type: string
          format: uuid
        hallName:
          type: string
        hallDescription:
          type: string
      required:
      - hallDescription
      - hallName
      - hallTypeUuid
    HallDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        hallType:
          $ref: "#/components/schemas/HallType"
        hallName:
          type: string
        hallDescription:
          type: string
    CreateExerciseRequest:
      type: object
      properties:
        name:
          type: string
        targetMuscles:
          type: array
          items:
            type: string
            format: uuid
          uniqueItems: true
    ExerciseDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        targetMuscles:
          type: array
          items:
            $ref: "#/components/schemas/TargetMuscleDto"
          uniqueItems: true
    UserDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        roles:
          type: array
          items:
            type: string
        membership:
          $ref: "#/components/schemas/Membership"
        firstName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        email:
          type: string
        username:
          type: string
        phoneNumber:
          type: string
        imageUrl:
          type: string
    ProgressOverviewDto:
      type: object
      properties:
        weeklyTotalSets:
          $ref: "#/components/schemas/ProgressOverviewStatisticDto"
        weeklySessionVolume:
          $ref: "#/components/schemas/ProgressOverviewStatisticDto"
    ProgressOverviewStatisticDto:
      type: object
      properties:
        value:
          type: integer
          format: int32
        trend:
          type: integer
          format: int32
    ChartDataDto:
      type: object
      properties:
        title:
          type: string
        timeSeries:
          $ref: "#/components/schemas/TimeSeriesDto"
    ChartDto:
      type: object
      properties:
        description:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/ChartDataDto"
    TimeSeriesDto:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
        values:
          type: array
          items:
            type: number
            format: float
    UserRoleDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        role:
          type: string
    PaymentDto:
      type: object
      properties:
        paymentId:
          type: string
          format: uuid
        currency:
          type: object
          properties:
            currencyCode:
              type: string
            numericCode:
              type: integer
              format: int32
            numericCodeAsString:
              type: string
            displayName:
              type: string
            symbol:
              type: string
            defaultFractionDigits:
              type: integer
              format: int32
        price:
          type: number
        status:
          type: string
          enum:
          - PENDING
          - SUCCEEDED
          - EXPIRED
          - FAILED
    PageHallDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/HallDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        sorted:
          type: boolean
        empty:
          type: boolean
        unsorted:
          type: boolean
    HallTypeDto:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:8081/realms/gym/protocol/openid-connect/auth
          tokenUrl: http://localhost:8081/realms/gym/protocol/openid-connect/token
          refreshUrl: http://localhost:8081/realms/gym/protocol/openid-connect/token
          scopes: {}
